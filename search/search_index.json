{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"jsondaora Interoperates dataclasses and TypedDict annotations with json objects for python Documentation : https://dutradda.github.io/jsondaora Source Code : https://github.com/dutradda/jsondaora Key Features Full compatibility with dataclasses module and TypedDict annotation Deserialize values from dict Deserialize values from bytes* Deserialization/serialization of chosen fields Deserialize the following standard types: Dict, List, Tuple, Set, Union and Any Dict serialization Direct json serialization with orjson (don't convert to dict recursively before serialization) Optional validation according with the json-schema specification* * feature in development. Requirements Python 3.8+ orjson for json serialization Installation $ pip install jsondaora Basic example from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @jsondaora class Person : name : str age : int class Music : name : str musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class MusicT ( TypedDict ): name : str @jsondaora class PersonT ( TypedDict ): name : str age : int musics : List [ MusicT ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , PersonT ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age=40, musics=[Person.Music(name='Imagine')]) b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}' Example for choose fields to deserialize from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @jsondaora ( deserialize_fields = ( 'name' )) class Person : name : str age : int class Music : name : str musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class MusicT ( TypedDict ): name : str @jsondaora ( deserialize_fields = ( 'name' ,)) class PersonT ( TypedDict ): name : str age : int musics : List [ MusicT ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , PersonT ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , PersonT )) dataclass: Person(name='John', age='40', musics=[{'name': 'Imagine'}]) b'{\"name\":\"John\",\"age\":\"40\",\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'musics': [{'name': 'Imagine'}], 'age': '40'} b'{\"name\":\"John\",\"musics\":[{\"name\":\"Imagine\"}],\"age\":\"40\"}' Example for choose fields to serialize from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @jsondaora ( serialize_fields = ( 'name' , 'age' )) class Person : name : str age : int class Music : name : str musics : List [ Music ] jsondict = dict ( name = 'John' , age = 40 , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str @jsondaora ( serialize_fields = ( 'age' ,)) class PersonT ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , PersonT ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , PersonT )) dataclass: Person(name='John', age=40, musics=[Person.Music(name='Imagine')]) b'{\"age\":40,\"name\":\"John\"}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"age\":40}'","title":"jsondaora"},{"location":"#jsondaora","text":"Interoperates dataclasses and TypedDict annotations with json objects for python Documentation : https://dutradda.github.io/jsondaora Source Code : https://github.com/dutradda/jsondaora","title":"jsondaora"},{"location":"#key-features","text":"Full compatibility with dataclasses module and TypedDict annotation Deserialize values from dict Deserialize values from bytes* Deserialization/serialization of chosen fields Deserialize the following standard types: Dict, List, Tuple, Set, Union and Any Dict serialization Direct json serialization with orjson (don't convert to dict recursively before serialization) Optional validation according with the json-schema specification* * feature in development.","title":"Key Features"},{"location":"#requirements","text":"Python 3.8+ orjson for json serialization","title":"Requirements"},{"location":"#installation","text":"$ pip install jsondaora","title":"Installation"},{"location":"#basic-example","text":"from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @jsondaora class Person : name : str age : int class Music : name : str musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class MusicT ( TypedDict ): name : str @jsondaora class PersonT ( TypedDict ): name : str age : int musics : List [ MusicT ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , PersonT ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , Person )) dataclass: Person(name='John', age=40, musics=[Person.Music(name='Imagine')]) b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"name\":\"John\",\"age\":40,\"musics\":[{\"name\":\"Imagine\"}]}'","title":"Basic example"},{"location":"#example-for-choose-fields-to-deserialize","text":"from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @jsondaora ( deserialize_fields = ( 'name' )) class Person : name : str age : int class Music : name : str musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class MusicT ( TypedDict ): name : str @jsondaora ( deserialize_fields = ( 'name' ,)) class PersonT ( TypedDict ): name : str age : int musics : List [ MusicT ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , PersonT ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , PersonT )) dataclass: Person(name='John', age='40', musics=[{'name': 'Imagine'}]) b'{\"name\":\"John\",\"age\":\"40\",\"musics\":[{\"name\":\"Imagine\"}]}' TypedDict: {'name': 'John', 'musics': [{'name': 'Imagine'}], 'age': '40'} b'{\"name\":\"John\",\"musics\":[{\"name\":\"Imagine\"}],\"age\":\"40\"}'","title":"Example for choose fields to deserialize"},{"location":"#example-for-choose-fields-to-serialize","text":"from typing import List , TypedDict from jsondaora import ( as_typed_dict , asdataclass , dataclass_asjson , jsondaora , typed_dict_asjson , ) @jsondaora ( serialize_fields = ( 'name' , 'age' )) class Person : name : str age : int class Music : name : str musics : List [ Music ] jsondict = dict ( name = 'John' , age = 40 , musics = [ dict ( name = 'Imagine' )]) person = asdataclass ( jsondict , Person ) print ( 'dataclass:' ) print ( person ) print ( dataclass_asjson ( person )) print () # TypedDict @jsondaora class Music ( TypedDict ): name : str @jsondaora ( serialize_fields = ( 'age' ,)) class PersonT ( TypedDict ): name : str age : int musics : List [ Music ] jsondict = dict ( name = b 'John' , age = '40' , musics = [ dict ( name = 'Imagine' )]) person = as_typed_dict ( jsondict , PersonT ) print ( 'TypedDict:' ) print ( person ) print ( typed_dict_asjson ( person , PersonT )) dataclass: Person(name='John', age=40, musics=[Person.Music(name='Imagine')]) b'{\"age\":40,\"name\":\"John\"}' TypedDict: {'name': 'John', 'age': 40, 'musics': [{'name': 'Imagine'}]} b'{\"age\":40}'","title":"Example for choose fields to serialize"},{"location":"changelog/","text":"CHANGELOG 0.14.0 - 2020-11-23 Improve to support schema with dynamic properties 0.13.5 - 2020-11-07 Fix jsonschema_asdataclass function 0.13.4 - 2020-10-24 Fix jsonschema_asdataclass when base classes is TypedDict 0.13.3 - 2020-09-17 Improve jsonschema_asdataclass function 0.13.2 - 2020-07-08 Fix deserializer 0.13.1 - 2020-07-08 Fix deserializer 0.13.0 - 2020-05-08 Update orjson version 0.12.2 - 2020-05-02 Improve serializer 0.12.1 - 2020-04-25 Improve typing annotations 0.12.0 - 2020-04-24 Improve jsonschema_asdataclass function Improve serialization/deserialization 0.11.1 - 2020-04-10 Fix typed dict serialization 0.11.0 - 2020-04-04 Improve bool deserialization Fix Union deserialization Create support for use __get_dynamic_type__ function on annotations types Remove unused parameter on OrjsonDefaultTypes.default_function Improve dataclasses.asdict function Remove dataclass recreation on decorator Fix pyflakes 0.10.2 - 2020-02-27 Fix serializers 0.10.1 - 2020-02-26 Fix deserialize_field function 0.10.0 - 2020-02-24 Add support for deserialize standard types 0.9.0 - 2019-10-23 Improve string and integer schemas Improve mypy 0.8.1 - 2019-10-22 Add package typing support 0.8.0 - 2019-10-02 Pin orjson version Fix typo on readme Improve jsondaora decorator Add devtools git submodule 0.7.0 - 2019-09-27 Create changelog manager","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"changelog/#0140-2020-11-23","text":"Improve to support schema with dynamic properties","title":"0.14.0 - 2020-11-23"},{"location":"changelog/#0135-2020-11-07","text":"Fix jsonschema_asdataclass function","title":"0.13.5 - 2020-11-07"},{"location":"changelog/#0134-2020-10-24","text":"Fix jsonschema_asdataclass when base classes is TypedDict","title":"0.13.4 - 2020-10-24"},{"location":"changelog/#0133-2020-09-17","text":"Improve jsonschema_asdataclass function","title":"0.13.3 - 2020-09-17"},{"location":"changelog/#0132-2020-07-08","text":"Fix deserializer","title":"0.13.2 - 2020-07-08"},{"location":"changelog/#0131-2020-07-08","text":"Fix deserializer","title":"0.13.1 - 2020-07-08"},{"location":"changelog/#0130-2020-05-08","text":"Update orjson version","title":"0.13.0 - 2020-05-08"},{"location":"changelog/#0122-2020-05-02","text":"Improve serializer","title":"0.12.2 - 2020-05-02"},{"location":"changelog/#0121-2020-04-25","text":"Improve typing annotations","title":"0.12.1 - 2020-04-25"},{"location":"changelog/#0120-2020-04-24","text":"Improve jsonschema_asdataclass function Improve serialization/deserialization","title":"0.12.0 - 2020-04-24"},{"location":"changelog/#0111-2020-04-10","text":"Fix typed dict serialization","title":"0.11.1 - 2020-04-10"},{"location":"changelog/#0110-2020-04-04","text":"Improve bool deserialization Fix Union deserialization Create support for use __get_dynamic_type__ function on annotations types Remove unused parameter on OrjsonDefaultTypes.default_function Improve dataclasses.asdict function Remove dataclass recreation on decorator Fix pyflakes","title":"0.11.0 - 2020-04-04"},{"location":"changelog/#0102-2020-02-27","text":"Fix serializers","title":"0.10.2 - 2020-02-27"},{"location":"changelog/#0101-2020-02-26","text":"Fix deserialize_field function","title":"0.10.1 - 2020-02-26"},{"location":"changelog/#0100-2020-02-24","text":"Add support for deserialize standard types","title":"0.10.0 - 2020-02-24"},{"location":"changelog/#090-2019-10-23","text":"Improve string and integer schemas Improve mypy","title":"0.9.0 - 2019-10-23"},{"location":"changelog/#081-2019-10-22","text":"Add package typing support","title":"0.8.1 - 2019-10-22"},{"location":"changelog/#080-2019-10-02","text":"Pin orjson version Fix typo on readme Improve jsondaora decorator Add devtools git submodule","title":"0.8.0 - 2019-10-02"},{"location":"changelog/#070-2019-09-27","text":"Create changelog manager","title":"0.7.0 - 2019-09-27"},{"location":"contributing/","text":"Starting Development git clone git@github.com:dutradda/jsondaora.git --recursive cd jsondaora make setup-python-virtualenv source venv/bin/activate make setup-python-project bake dependencies Running the integration suite: bake integration Other bake tasks: bake check-code bake tests-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Development - Contributing"},{"location":"contributing/#starting-development","text":"git clone git@github.com:dutradda/jsondaora.git --recursive cd jsondaora make setup-python-virtualenv source venv/bin/activate make setup-python-project bake dependencies","title":"Starting Development"},{"location":"contributing/#running-the-integration-suite","text":"bake integration","title":"Running the integration suite:"},{"location":"contributing/#other-bake-tasks","text":"bake check-code bake tests-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Other bake tasks:"},{"location":"features/","text":"jsondaora features jsondaora gives you the following: Same interface as dataclasses module, plus extensions","title":"Features"},{"location":"features/#jsondaora-features","text":"jsondaora gives you the following:","title":"jsondaora features"},{"location":"features/#same-interface-as-dataclasses-module-plus-extensions","text":"","title":"Same interface as dataclasses module, plus extensions"},{"location":"json/","text":"JavaScript Object Notation Introduction from w3schools : - https://www.w3schools.com/js/js_json_intro.asp JSON Schema Official Documentation: - https://json-schema.org","title":"Json intro"},{"location":"json/#javascript-object-notation","text":"Introduction from w3schools : - https://www.w3schools.com/js/js_json_intro.asp","title":"JavaScript Object Notation"},{"location":"json/#json-schema","text":"Official Documentation: - https://json-schema.org","title":"JSON Schema"},{"location":"python-dataclass/","text":"Python 3.7 dataclasses module Official Documentation: - https://docs.python.org/3/library/dataclasses.html Dataclass Benchmark Data types performance comparision: - https://medium.com/@jacktator/dataclass-vs-namedtuple-vs-object-for-performance-optimization-in-python-691e234253b9","title":"Python dataclass intro"},{"location":"python-dataclass/#python-37-dataclasses-module","text":"Official Documentation: - https://docs.python.org/3/library/dataclasses.html","title":"Python 3.7 dataclasses module"},{"location":"python-dataclass/#dataclass-benchmark","text":"Data types performance comparision: - https://medium.com/@jacktator/dataclass-vs-namedtuple-vs-object-for-performance-optimization-in-python-691e234253b9","title":"Dataclass Benchmark"}]}